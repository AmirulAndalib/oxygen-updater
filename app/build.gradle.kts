import java.util.Properties

plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.firebase.crashlytics)
    alias(libs.plugins.gms.services)
    alias(libs.plugins.devtools.ksp)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.hilt)
    alias(libs.plugins.room)
    id("kotlin-parcelize")
}

fun loadProperties(
    name: String,
    vararg defaults: Pair<String, String>,
) = Properties().apply {
    val logger = logger
    val file = rootProject.file("$name.properties")
    if (!file.exists()) {
        logger.warn("Warning: File '$name.properties' doesn't exist. Creating it with default values.")
        defaults.forEach { setProperty(it.first, it.second) }
        store(file.outputStream(), "Autogenerated by app/build.gradle.kts")
    }

    try {
        file.inputStream().use { load(it) }
    } catch (e: Exception) {
        logger.warn("Warning: Couldn't read properties from $name.properties. $e.")
    }
}

fun arrayForBuildConfig(vararg array: String) = array.joinToString(prefix = "{", postfix = "}") {
    "\"$it\""
}

android {
    namespace = "com.oxygenupdater"

    // https://developer.android.com/studio/releases/build-tools
    buildToolsVersion = "35.0.0"
    compileSdk = 35

    testBuildType = "instrumentation"

    defaultConfig {
        applicationId = "com.arjanvlek.oxygenupdater"

        minSdk = 21
        targetSdk = 35

        versionCode = 120
        versionName = "6.4.1"

        testApplicationId = "$namespace.$testBuildType"
        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
        testHandleProfiling = true

        proguardFiles(
            getDefaultProguardFile("proguard-android-optimize.txt"),
            "proguard-rules.pro",
        )
    }

    @Suppress("UnstableApiUsage")
    testOptions.managedDevices.localDevices.maybeCreate("pixel7ProApi33").apply {
        device = "Pixel 7 Pro"
        apiLevel = 33 // keep in sync with ci.yml

        // Use Automated Test Devices on API 30 â€” 33 for better runtime performance
        // https://developer.android.com/studio/test/gradle-managed-devices#gmd-atd
        systemImageSource = "google-atd"
    }

    testCoverage {
        jacocoVersion = libs.versions.jacoco.get()
    }

    @Suppress("UnstableApiUsage")
    experimentalProperties["android.experimental.self-instrumenting"] = true

    // Because the app has an in-app language switch feature, we need
    // to disable splitting configuration APKs for language resources.
    // This ensures that the app won't crash if the user selects a
    // language that isn't in their device language list.
    // This'll obviously increase APK size significantly.
    @Suppress("UnstableApiUsage")
    bundle.language.enableSplit = false

    packaging.resources.excludes += setOf(
        "{NOTICE,LICENSE}*",
        "META-INF/{AL2.0,LGPL2.1}",
        // Note: excluding these files may cause debugging tools to stop working, e.g. LayoutInspector
        "META-INF/*.version", // AndroidX version files
        "/*.properties",
        "META-INF/*.properties",
        // https://github.com/Kotlin/kotlinx.coroutines#avoiding-including-the-debug-infrastructure-in-the-resulting-apk
        "DebugProbesKt.bin",
    )

    signingConfigs {
        val keystore = loadProperties(
            "keystore",
            "storePassword" to "",
            "keyPassword" to "",
            "keyAlias" to "",
            "storeFile" to "keyStore.jks",
        )

        create("release") {
            keyAlias = keystore["keyAlias"] as String
            keyPassword = keystore["keyPassword"] as String
            storeFile = file(keystore["storeFile"] as String)
            storePassword = keystore["storePassword"] as String
        }
    }

    buildTypes {
        // Config for releases and testing on a real device
        // Uses the production server, and reads system properties using the OnePlus/OxygenOS specific build.prop values
        release {
            buildConfigField("String", "SERVER_DOMAIN", "\"https://oxygenupdater.com/\"")
            buildConfigField("String", "SERVER_API_BASE", "\"api/v2.9/\"")
            buildConfigField("String", "NOTIFICATIONS_PREFIX", "\"\"")
            buildConfigField(
                "String[]",
                "DEVICE_NAME_LOOKUP_KEYS",
                arrayForBuildConfig(
                    "ro.display.series",
                    "ro.build.product",
                )
            )
            buildConfigField(
                "String[]",
                "OS_VERSION_NUMBER_LOOKUP_KEYS",
                arrayForBuildConfig(
                    "ro.rom.version",
                    "ro.oxygen.version",
                    "ro.build.ota.versionname",
                    "ro.vendor.oplus.exp.version",
                    "ro.build.display.ota",
                )
            )
            buildConfigField("String", "OS_OTA_VERSION_NUMBER_LOOKUP_KEY", "\"ro.build.version.ota\"")
            // Latter one is only used on very old OOS versions

            signingConfig = signingConfigs.getByName("release")

            isMinifyEnabled = true
            isShrinkResources = true
            isDebuggable = false
        }

        // Config for use during debugging and testing on an emulator
        // Uses the test server, and reads system properties using the default build.prop values present on any Android device/emulator
        val debug = getByName("debug") {
            buildConfigField("String", "SERVER_DOMAIN", "\"https://test.oxygenupdater.com/\"")
            buildConfigField("String", "SERVER_API_BASE", "\"api/v2.9/\"")
            buildConfigField("String", "NOTIFICATIONS_PREFIX", "\"test_\"")
            buildConfigField(
                "String[]",
                "DEVICE_NAME_LOOKUP_KEYS",
                arrayForBuildConfig("ro.product.name")
            )
            buildConfigField(
                "String[]",
                "OS_VERSION_NUMBER_LOOKUP_KEYS",
                arrayForBuildConfig("ro.build.version.release")
            )
            buildConfigField("String", "OS_OTA_VERSION_NUMBER_LOOKUP_KEY", "\"ro.build.version.incremental\"")

            isMinifyEnabled = true
            isShrinkResources = true
            isDebuggable = true

            // Disable mapping.txt upload for non-release builds
            configure<com.google.firebase.crashlytics.buildtools.gradle.CrashlyticsExtension> {
                mappingFileUploadEnabled = false
            }
        }

        create(testBuildType) {
            initWith(debug)

            // AGP 4.1+ does its own instrumentation, which is probably incompatible
            // with Jacoco because turning this on fails all tests with `IllegalClassFormatException`.
            // enableUnitTestCoverage = true
            // Prefer running via `./gradlew createManagedDeviceInstrumentationAndroidTestCoverageReport`.
            // Reports are generated in `build/reports/coverage/androidTest/instrumentation/managedDevice/index.html`.
            enableAndroidTestCoverage = true

            // Tests don't work with minification for some reason
            isMinifyEnabled = false
            isShrinkResources = false
        }

        val languages = fileTree("src/main/res") {
            include("values-*/strings.xml")
        }.files.mapNotNull {
            it.parentFile?.name?.removePrefix("values-")?.replace("-r", "-")
        }.joinToString { "\"$it\"" }

        val billing = loadProperties("billing", "base64PublicKey" to "")

        // to distinguish in app drawer and allow multiple builds to exist in parallel on the same device
        buildTypes.forEach {
            it.buildConfigField("String", "AD_BANNER_MAIN_ID", "\"ca-app-pub-1816831161514116/9792024147\"")
            it.buildConfigField("String", "AD_INTERSTITIAL_NEWS_ID", "\"ca-app-pub-1816831161514116/2367225965\"")
            it.buildConfigField("String", "BASE64_PUBLIC_KEY", "\"${billing["base64PublicKey"]}\"")
            it.buildConfigField("String[]", "SUPPORTED_LANGUAGES", "{\"en\", $languages}")

            val buildName = it.name
            if (buildName != "release") {
                it.versionNameSuffix = "-$buildName"
                it.applicationIdSuffix = ".$buildName"
                it.resValue("string", "app_name", "Oxygen Updater ($buildName)")
            } else {
                it.resValue("string", "app_name", "Oxygen Updater")
            }

            it.addManifestPlaceholders(
                mapOf(
                    "hostName" to "${if (buildName != "release") "test." else ""}oxygenupdater.com",
                    "advertisingAppId" to "ca-app-pub-1816831161514116~4275332954",
                    "shortcutXml" to "@xml/shortcuts_${buildName.lowercase()}",
                )
            )
        }
    }

    val javaVersion = JavaVersion.VERSION_17 // keep in sync with `jvmToolchain` below
    kotlinOptions.jvmTarget = javaVersion.toString()
    compileOptions {
        isCoreLibraryDesugaringEnabled = true
        sourceCompatibility = javaVersion
        targetCompatibility = javaVersion
    }

    composeOptions.kotlinCompilerExtensionVersion = libs.versions.compose.compiler.get()

    buildFeatures {
        viewBinding = true
        compose = true
        // AGP 8+ doesn't generate BuildConfig by default
        buildConfig = true
    }

    // https://developer.android.com/guide/topics/resources/app-languages#auto-localeconfig
    @Suppress("UnstableApiUsage")
    androidResources.generateLocaleConfig = true
}

// Required to workaround https://issuetracker.google.com/issues/260059413
kotlin {
    jvmToolchain(17) // keep in sync with `javaVersion` above
    compilerOptions {
        val prefix = "plugin:androidx.compose.compiler.plugins.kotlin"
        val composeMetrics = project.layout.buildDirectory.dir("composeMetrics").get().asFile.path
        freeCompilerArgs.addAll(
            // Disable the annoying "Parameter specified as non-null is null" exceptions
            "-Xno-param-assertions",
            // https://github.com/androidx/androidx/blob/androidx-main/compose/compiler/design/compiler-metrics.md
            // Requires a fresh build to show all outputs
            "-P", "$prefix:metricsDestination=$composeMetrics",
            "-P", "$prefix:reportsDestination=$composeMetrics",
            // Introduced in 1.5.4: https://r.android.com/c/2671135,
            // stabilized in 1.5.13: https://r.android.com/c/3040172
            "-P", "$prefix:strongSkipping=true",
            // Introduced in 1.5.9: https://r.android.com/c/2912628
            "-P", "$prefix:nonSkippingGroupOptimization=true",
        )
    }
}

ksp {
    // Add Room-specific arguments: https://developer.android.com/jetpack/androidx/releases/room#compiler-options
    arg("room.incremental", "true")
    arg("room.generateKotlin", "true")
}

hilt {
    // https://dagger.dev/hilt/gradle-setup#aggregating-task
    enableAggregatingTask = true
}

room {
    schemaDirectory("$projectDir/schemas")
}

dependencies {
    implementation(fileTree(mapOf("dir" to "libs", "include" to listOf("*.jar"))))

    coreLibraryDesugaring(libs.android.desugar)

    implementation(libs.kotlinx.coroutines.core)
    implementation(libs.kotlinx.coroutines.android)

    implementation(libs.androidx.annotation)
    implementation(libs.androidx.browser)
    implementation(libs.androidx.preference.ktx)
    implementation(libs.androidx.work.runtime)

    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.core.splashscreen)

    implementation(libs.dagger.hilt.android)
    ksp(libs.dagger.hilt.android.compiler)
    implementation(libs.androidx.hilt.navigation.compose)
    implementation(libs.androidx.hilt.work)
    ksp(libs.androidx.hilt.compiler)

    implementation(libs.androidx.lifecycle.common.java8)
    implementation(libs.androidx.lifecycle.livedata)
    implementation(libs.androidx.lifecycle.viewmodel)
    implementation(libs.androidx.lifecycle.runtime.compose)

    implementation(libs.androidx.room.ktx)
    implementation(libs.androidx.room.runtime)
    ksp(libs.androidx.room.compiler)

    implementation(libs.androidx.compose.animation)
    implementation(libs.androidx.compose.animation.graphics)
    implementation(libs.androidx.compose.foundation)
    implementation(libs.androidx.compose.material3)
    implementation(libs.androidx.compose.material3.window.size)
    implementation(libs.androidx.compose.material.icons.extended)
    implementation(libs.androidx.compose.runtime.livedata)
    implementation(libs.androidx.compose.ui)
    implementation(libs.androidx.compose.ui.text.google.fonts)
    debugImplementation(libs.androidx.compose.ui.tooling)
    implementation(libs.androidx.compose.ui.tooling.preview)

    implementation(libs.androidx.activity.compose)
    implementation(libs.androidx.navigation.compose)

    implementation(platform(libs.coil.bom))
    implementation(libs.coil.compose)
    implementation(libs.coil.network.okhttp)
    implementation(libs.coil.network.cache)

    implementation(libs.accompanist.permissions)
    implementation(libs.accompanist.placeholder.material3)

    implementation(platform(libs.firebase.bom))
    implementation(libs.firebase.analytics)
    implementation(libs.firebase.crashlytics)
    implementation(libs.firebase.messaging)

    implementation(libs.billing)
    implementation(libs.billing.ktx)

    implementation(libs.google.play.app.update)
    implementation(libs.google.play.services.base)
    implementation(libs.google.play.services.ads)
    implementation(libs.google.ump)

    implementation(libs.okhttp.logging.interceptor)

    implementation(libs.retrofit)
    implementation(libs.retrofit.converter.moshi)
    implementation(libs.moshi)
    ksp(libs.moshi.kotlin.codegen)

    implementation(libs.libsu.core)
    implementation(libs.libsu.nio)
    implementation(libs.libsu.service)

    testImplementation(libs.junit)
    testImplementation(libs.kotlin.test.junit)
    testImplementation(libs.androidx.annotation)

    androidTestImplementation(libs.androidx.test.core)
    androidTestImplementation(libs.androidx.test.runner)
    androidTestImplementation(libs.androidx.test.rules)
    androidTestImplementation(libs.androidx.test.ext.truth)
    androidTestImplementation(libs.androidx.test.ext.junit)
    androidTestImplementation(libs.androidx.compose.ui.test.junit4)

    val testBuildTypeImplementation = "${android.testBuildType}Implementation"
    // Needed for createAndroidComposeRule, but not createComposeRule
    testBuildTypeImplementation(libs.androidx.compose.ui.test.manifest)
    // Required for testing to avoid `NoSuchMethodError: No static method forceEnableAppTracing()`
    testBuildTypeImplementation(libs.androidx.tracing)
}

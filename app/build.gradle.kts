import com.android.build.api.dsl.ApplicationBuildType
import com.google.firebase.crashlytics.buildtools.gradle.CrashlyticsExtension
import java.net.URI
import java.util.Properties

plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.firebase.crashlytics)
    alias(libs.plugins.gms.services)
    alias(libs.plugins.devtools.ksp)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.compose)
    alias(libs.plugins.hilt)
    alias(libs.plugins.room)
    id("kotlin-parcelize")
}

fun loadProperties(
    name: String,
    vararg defaults: Pair<String, String>,
) = Properties().apply {
    val logger = logger
    val file = rootProject.file("$name.properties")
    if (!file.exists()) {
        logger.warn("Warning: File '$name.properties' doesn't exist. Creating it with default values.")
        defaults.forEach { setProperty(it.first, it.second) }
        store(file.outputStream(), "Autogenerated by app/build.gradle.kts")
    }

    try {
        file.inputStream().use { load(it) }
    } catch (e: Exception) {
        logger.warn("Warning: Couldn't read properties from $name.properties. $e.")
    }
}

/**
 * If the build name is "release", it will use the production server, and getprop keys will
 * be for OPPO/OnePlus OxygenOS/ColorOS specific values.
 *
 * Otherwise, the test server will be used (unless [localOverride] is set), and getprop keys
 * will be for what we find on any Android device/emulator.
 *
 * @param localOverride if `true`, uses the local (LAN) server. Cannot be used on release builds.
 *   Note: if `true`, and local server is not HTTPS, we need `android:usesCleartextTraffic="true"`
 *   in AndroidManifest.xml as well.
 */
fun ApplicationBuildType.setupBuildConfig(
    localOverride: Boolean = false, // default must always be false
) {
    val buildName = name
    val release = buildName == "release"

    if (release) assert(!localOverride) { "`release = true` is incompatible with localOverride" }
    // Disable Crashlytics upload for non-release builds
    else configure<CrashlyticsExtension> {
        nativeSymbolUploadEnabled = false
        mappingFileUploadEnabled = false
    }

    val minify = release || !localOverride
    isMinifyEnabled = minify
    isShrinkResources = minify

    isDebuggable = !release

    // To distinguish in app drawer and allow multiple builds to exist in parallel on the same device
    if (release) {
        resValue("string", "app_name", "Oxygen Updater")
    } else {
        versionNameSuffix = "-$buildName"
        applicationIdSuffix = ".$buildName"
        resValue("string", "app_name", "Oxygen Updater ($buildName)")
    }

    val domain: String
    val apiBase: String
    val notifPrefix: String
    if (release) {
        domain = "https://oxygenupdater.com/"
        apiBase = "api/v2.9/"
        notifPrefix = ""
    } else if (localOverride) {
        domain = "http://192.168.1.4:81/"
        apiBase = "v2.9/"
        notifPrefix = "local_"
    } else {
        domain = "https://test.oxygenupdater.com/"
        apiBase = "api/v2.9/"
        notifPrefix = "test_"
    }

    addManifestPlaceholders(
        mapOf(
            "hostName" to URI(domain).host,
            "shortcutXml" to "@xml/shortcuts_${buildName.lowercase()}",
        )
    )

    buildConfigField("String", "SERVER_DOMAIN", "\"$domain\"")
    buildConfigField("String", "SERVER_API_BASE", "\"$apiBase\"")
    buildConfigField("String", "NOTIFICATIONS_PREFIX", "\"$notifPrefix\"")

    val useReleaseLookupKeys = release || localOverride
    val deviceNameLookupKeys = if (useReleaseLookupKeys) arrayOf(
        "ro.display.series",
        "ro.build.product",
    ) else arrayOf("ro.product.name")
    val versionNumberLookupKeys = if (useReleaseLookupKeys) arrayOf(
        "ro.rom.version",
        "ro.oxygen.version",
        "ro.build.ota.versionname",
        "ro.vendor.oplus.exp.version",
        "ro.build.display.ota",
    ) else arrayOf("ro.build.version.release")
    val otaVersionLookupKey = if (useReleaseLookupKeys) "ro.build.version.ota" else "ro.build.version.incremental"

    fun Array<String>.stringify() = joinToString(prefix = "{", postfix = "}") { "\"$it\"" }

    buildConfigField("String[]", "DEVICE_NAME_LOOKUP_KEYS", deviceNameLookupKeys.stringify())
    buildConfigField("String[]", "OS_VERSION_NUMBER_LOOKUP_KEYS", versionNumberLookupKeys.stringify())
    buildConfigField("String", "OS_OTA_VERSION_NUMBER_LOOKUP_KEY", "\"$otaVersionLookupKey\"")
}

android {
    namespace = "com.oxygenupdater"

    // https://developer.android.com/studio/releases/build-tools
    buildToolsVersion = "36.0.0"
    compileSdk = 36

    testBuildType = "instrumentation"

    defaultConfig {
        applicationId = "com.arjanvlek.oxygenupdater"

        minSdk = 21
        targetSdk = 36

        versionCode = 129
        versionName = "6.7.5"

        addManifestPlaceholders(mapOf("advertisingAppId" to "ca-app-pub-1816831161514116~4275332954"))
        buildConfigField("String", "AD_BANNER_MAIN_ID", "\"ca-app-pub-1816831161514116/9792024147\"")
        buildConfigField("String", "AD_INTERSTITIAL_NEWS_ID", "\"ca-app-pub-1816831161514116/2367225965\"")

        val base64PublicKey = loadProperties("billing", "base64PublicKey" to "")["base64PublicKey"] as String
        buildConfigField("String", "BASE64_PUBLIC_KEY", "\"$base64PublicKey\"")

        val languages = fileTree("src/main/res") {
            include("values-*/strings.xml")
        }.files.run {
            mapNotNull {
                it.parentFile?.name?.removePrefix("values-")?.replace("-r", "-")
            }.joinToString { "\"$it\"" }
        }
        buildConfigField("String[]", "SUPPORTED_LANGUAGES", "{\"en\", $languages}")

        testApplicationId = "$namespace.$testBuildType"
        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
        testHandleProfiling = true

        proguardFiles(
            getDefaultProguardFile("proguard-android-optimize.txt"),
            "proguard-rules.pro",
        )
    }

    @Suppress("UnstableApiUsage")
    testOptions.managedDevices.localDevices.maybeCreate("pixel9ProApi35").apply {
        device = "Pixel 9 Pro"
        apiLevel = 35 // keep in sync with ci.yml

        // Use Automated Test Devices on API 30 â€” 35 for better runtime performance
        // https://developer.android.com/studio/test/gradle-managed-devices#gmd-atd
        systemImageSource = "google-atd"
    }

    testCoverage {
        jacocoVersion = libs.versions.jacoco.get()
    }

    @Suppress("UnstableApiUsage")
    experimentalProperties["android.experimental.self-instrumenting"] = true

    // Because the app has an in-app language switch feature, we need
    // to disable splitting configuration APKs for language resources.
    // This ensures that the app won't crash if the user selects a
    // language that isn't in their device language list.
    // This'll obviously increase APK size significantly.
    bundle.language.enableSplit = false

    packaging.resources.excludes += setOf(
        "{NOTICE,LICENSE}*",
        "META-INF/{AL2.0,LGPL2.1}",
        // Note: excluding these files may cause debugging tools to stop working, e.g. LayoutInspector
        "META-INF/*.version", // AndroidX version files
        "/*.properties",
        "META-INF/*.properties",
        // https://github.com/Kotlin/kotlinx.coroutines#avoiding-including-the-debug-infrastructure-in-the-resulting-apk
        "DebugProbesKt.bin",
    )

    signingConfigs {
        val keystore = loadProperties(
            "keystore",
            "storePassword" to "",
            "keyPassword" to "",
            "keyAlias" to "",
            "storeFile" to "keyStore.jks",
        )

        create("release") {
            keyAlias = keystore["keyAlias"] as String
            keyPassword = keystore["keyPassword"] as String
            storeFile = file(keystore["storeFile"] as String)
            storePassword = keystore["storePassword"] as String
        }
    }

    buildTypes {
        release {
            setupBuildConfig()

            signingConfig = signingConfigs.getByName("release")
        }

        debug {
            setupBuildConfig(localOverride = false)
        }

        create(testBuildType) {
            setupBuildConfig(localOverride = false)

            signingConfig = signingConfigs.getByName("debug") // use debug's

            // AGP 4.1+ does its own instrumentation, which is probably incompatible
            // with Jacoco because turning this on fails all tests with `IllegalClassFormatException`.
            // enableUnitTestCoverage = true
            // Prefer running via `./gradlew createManagedDeviceInstrumentationAndroidTestCoverageReport`.
            // Reports are generated in `build/reports/coverage/androidTest/instrumentation/managedDevice/index.html`.
            enableAndroidTestCoverage = true

            // Tests don't work with minification for some reason
            isMinifyEnabled = false
            isShrinkResources = false
        }
    }

    compileOptions.isCoreLibraryDesugaringEnabled = true

    buildFeatures {
        compose = true
        // AGP 8+ doesn't generate BuildConfig by default
        buildConfig = true
    }

    room {
        schemaDirectory("$projectDir/schemas")
    }

    // https://developer.android.com/guide/topics/resources/app-languages#auto-localeconfig
    @Suppress("UnstableApiUsage")
    androidResources.generateLocaleConfig = true
}

composeCompiler {
    layout.buildDirectory.let {
        // https://github.com/androidx/androidx/blob/androidx-main/compose/compiler/design/compiler-metrics.md
        // Requires a fresh build to show all outputs
        metricsDestination = it.dir("composeMetrics")
        reportsDestination = it.dir("composeMetrics")
    }
}

kotlin {
    jvmToolchain(17)
    compilerOptions {
        // https://kotlinlang.org/docs/whatsnew21.html#extra-compiler-checks
        extraWarnings.set(true)

        freeCompilerArgs.addAll(
            // Disable the annoying "Parameter specified as non-null is null" exceptions
            "-Xno-param-assertions",
            // https://kotlinlang.org/docs/whatsnew21.html#global-warning-suppression
            "-Xsuppress-warning=NOTHING_TO_INLINE",
            // Apply (validation) annotations to both value parameter and field: https://youtrack.jetbrains.com/issue/KT-73255
            "-Xannotation-default-target=param-property",
        )
    }
}

ksp {
    // Add Room-specific arguments: https://developer.android.com/jetpack/androidx/releases/room#compiler-options
    arg("room.incremental", "true")
    arg("room.generateKotlin", "true")
}

hilt {
    // https://dagger.dev/hilt/gradle-setup#aggregating-task
    enableAggregatingTask = true
}

dependencies {
    implementation(fileTree(mapOf("dir" to "libs", "include" to listOf("*.jar"))))

    coreLibraryDesugaring(libs.android.desugar)

    implementation(libs.kotlinx.coroutines.core)
    implementation(libs.kotlinx.coroutines.android)

    implementation(libs.androidx.appcompat)
    implementation(libs.androidx.annotation)
    implementation(libs.androidx.browser)
    implementation(libs.androidx.work.runtime)

    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.core.splashscreen)

    implementation(libs.dagger.hilt.android)
    ksp(libs.dagger.hilt.android.compiler)
    implementation(libs.androidx.hilt.navigation.compose)
    implementation(libs.androidx.hilt.work)
    ksp(libs.androidx.hilt.compiler)

    implementation(libs.androidx.lifecycle.common.java8)
    implementation(libs.androidx.lifecycle.livedata)
    implementation(libs.androidx.lifecycle.viewmodel)
    implementation(libs.androidx.lifecycle.runtime.compose)

    implementation(libs.androidx.room.ktx)
    implementation(libs.androidx.room.runtime)
    ksp(libs.androidx.room.compiler)

    implementation(libs.androidx.compose.animation)
    implementation(libs.androidx.compose.animation.graphics)
    implementation(libs.androidx.compose.foundation)
    implementation(libs.androidx.compose.material3)
    implementation(libs.androidx.compose.material3.window.size)
    implementation(libs.androidx.compose.runtime.livedata)
    implementation(libs.androidx.compose.ui)
    implementation(libs.androidx.compose.ui.text.google.fonts)
    debugImplementation(libs.androidx.compose.ui.tooling)
    implementation(libs.androidx.compose.ui.tooling.preview)

    implementation(libs.androidx.activity.compose)
    implementation(libs.androidx.navigation.compose)

    implementation(libs.accompanist.permissions)

    implementation(libs.eygraber.compose.placeholder.material3)

    implementation(platform(libs.coil.bom))
    implementation(libs.coil.compose)
    implementation(libs.coil.network.okhttp)
    implementation(libs.coil.network.cache)

    implementation(platform(libs.firebase.bom))
    implementation(libs.firebase.analytics)
    implementation(libs.firebase.crashlytics)
    implementation(libs.firebase.messaging)

    implementation(libs.billing)
    implementation(libs.billing.ktx)

    implementation(libs.google.play.app.update)
    implementation(libs.google.play.services.base)
    implementation(libs.google.play.services.ads)
    implementation(libs.google.ump)

    implementation(libs.okhttp.logging.interceptor)

    implementation(libs.retrofit)
    implementation(libs.retrofit.converter.moshi)
    implementation(libs.moshi)
    ksp(libs.moshi.kotlin.codegen)

    implementation(libs.libsu.core)
    implementation(libs.libsu.nio)
    implementation(libs.libsu.service)

    testImplementation(libs.junit)
    testImplementation(libs.kotlin.test.junit)
    testImplementation(libs.androidx.annotation)

    androidTestImplementation(libs.androidx.test.core)
    androidTestImplementation(libs.androidx.test.runner)
    androidTestImplementation(libs.androidx.test.rules)
    androidTestImplementation(libs.androidx.test.ext.truth)
    androidTestImplementation(libs.androidx.test.ext.junit)
    androidTestImplementation(libs.androidx.compose.ui.test.junit4)

    val testBuildTypeImplementation = "${android.testBuildType}Implementation"
    // Needed for createAndroidComposeRule, but not createComposeRule
    testBuildTypeImplementation(libs.androidx.compose.ui.test.manifest)
    // Required for testing to avoid `NoSuchMethodError: No static method forceEnableAppTracing()`
    testBuildTypeImplementation(libs.androidx.tracing)
}

import com.google.firebase.crashlytics.buildtools.gradle.CrashlyticsExtension
import java.util.Properties

plugins {
    id("com.android.application")
    id("com.google.gms.google-services")
    id("com.google.firebase.crashlytics")
    id("kotlin-parcelize")
    kotlin("android")
    id("com.google.devtools.ksp")
}

fun loadProperties(
    name: String,
    vararg defaults: Pair<String, String>,
) = Properties().apply {
    val logger = logger
    val file = rootProject.file("$name.properties")
    if (!file.exists()) {
        logger.warn("Warning: File '$name.properties' doesn't exist. Creating it with default values.")
        defaults.forEach { setProperty(it.first, it.second) }
        store(file.outputStream(), "Autogenerated by app/build.gradle.kts")
    }

    try {
        file.inputStream().use { load(it) }
    } catch (e: Exception) {
        logger.warn("Warning: Couldn't read properties from $name.properties. $e.")
    }
}

fun arrayForBuildConfig(vararg array: String) = array.joinToString(prefix = "{", postfix = "}") {
    "\"$it\""
}

android {
    namespace = "com.oxygenupdater"

    // https://developer.android.com/studio/releases/build-tools
    buildToolsVersion = "34.0.0"
    compileSdk = 34

    defaultConfig {
        applicationId = "com.arjanvlek.oxygenupdater"

        minSdk = 21
        targetSdk = 34

        versionCode = 100
        versionName = "5.11.3"

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"

        proguardFiles(
            getDefaultProguardFile("proguard-android-optimize.txt"),
            "proguard-rules.pro",
        )
    }

    bundle {
        language {
            // Because the app has an in-app language switch feature, we need
            // to disable splitting configuration APKs for language resources.
            // This ensures that the app won't crash if the user selects a
            // language that isn't in their device language list.
            // This'll obviously increase APK size significantly.
            @Suppress("UnstableApiUsage")
            enableSplit = false
        }
    }

    packaging {
        resources.excludes.addAll(
            arrayOf(
                "/META-INF/{NOTICE,LICENSE}.txt",
                "/META-INF/{NOTICE,LICENSE}",
                "/META-INF/{AL2.0,LGPL2.1}",
            )
        )
    }

    signingConfigs {
        val keystore = loadProperties(
            "keystore",
            Pair("storePassword", ""),
            Pair("keyPassword", ""),
            Pair("keyAlias", ""),
            Pair("storeFile", "keyStore.jks")
        )

        create("release") {
            keyAlias = keystore["keyAlias"] as String
            keyPassword = keystore["keyPassword"] as String
            storeFile = file(keystore["storeFile"] as String)
            storePassword = keystore["storePassword"] as String
        }
    }

    buildTypes {
        // Config for releases and testing on a real device
        // Uses the production server, and reads system properties using the OnePlus/OxygenOS specific build.prop values
        getByName("release") {
            buildConfigField("String", "SERVER_DOMAIN", "\"https://oxygenupdater.com/\"")
            buildConfigField("String", "SERVER_API_BASE", "\"api/v2.8/\"")
            buildConfigField("String", "NOTIFICATIONS_PREFIX", "\"\"")
            buildConfigField(
                "String[]",
                "DEVICE_NAME_LOOKUP_KEYS",
                arrayForBuildConfig(
                    "ro.display.series",
                    "ro.build.product",
                )
            )
            buildConfigField(
                "String[]",
                "OS_VERSION_NUMBER_LOOKUP_KEYS",
                arrayForBuildConfig(
                    "ro.rom.version",
                    "ro.oxygen.version",
                    "ro.build.ota.versionname",
                    "ro.vendor.oplus.exp.version",
                    "ro.build.display.ota",
                )
            )
            buildConfigField("String", "OS_OTA_VERSION_NUMBER_LOOKUP_KEY", "\"ro.build.version.ota\"")
            // Latter one is only used on very old OOS versions

            signingConfig = signingConfigs.getByName("release")

            isMinifyEnabled = true
            isShrinkResources = true
            isDebuggable = false
        }
        // Config for use during debugging and testing on an emulator
        // Uses the test server, and reads system properties using the default build.prop values present on any Android device/emulator
        getByName("debug") {
            buildConfigField("String", "SERVER_DOMAIN", "\"https://test.oxygenupdater.com/\"")
            buildConfigField("String", "SERVER_API_BASE", "\"api/v2.8/\"")
            buildConfigField("String", "NOTIFICATIONS_PREFIX", "\"test_\"")
            buildConfigField(
                "String[]",
                "DEVICE_NAME_LOOKUP_KEYS",
                arrayForBuildConfig("ro.product.name")
            )
            buildConfigField(
                "String[]",
                "OS_VERSION_NUMBER_LOOKUP_KEYS",
                arrayForBuildConfig("ro.build.version.release")
            )
            buildConfigField("String", "OS_OTA_VERSION_NUMBER_LOOKUP_KEY", "\"ro.build.version.incremental\"")

            isMinifyEnabled = true
            isShrinkResources = true
            isDebuggable = true

            configure<CrashlyticsExtension> {
                mappingFileUploadEnabled = false
            }
        }

        val languages = fileTree("src/main/res") {
            include("values-*/strings.xml")
        }.files.map {
            it.parentFile.name.removePrefix("values-").replace("-r", "-")
        }.joinToString { "\"$it\"" }

        val billing = loadProperties("billing", Pair("base64PublicKey", ""))

        // to distinguish in app drawer and allow multiple builds to exist in parallel on the same device
        buildTypes.forEach {
            it.buildConfigField("String", "AD_BANNER_MAIN_ID", "\"ca-app-pub-1816831161514116/9792024147\"")
            it.buildConfigField("String", "AD_BANNER_NEWS_ID", "\"ca-app-pub-1816831161514116/5072283884\"")
            it.buildConfigField("String", "AD_BANNER_INSTALL_ID", "\"ca-app-pub-1816831161514116/8933025813\"")
            it.buildConfigField("String", "AD_BANNER_FAQ_ID", "\"ca-app-pub-1816831161514116/1987794774\"")
            it.buildConfigField("String", "AD_INTERSTITIAL_NEWS_ID", "\"ca-app-pub-1816831161514116/2367225965\"")
            it.buildConfigField("String", "BASE64_PUBLIC_KEY", "\"${billing["base64PublicKey"]}\"")
            it.buildConfigField("String[]", "SUPPORTED_LANGUAGES", "{\"en\", $languages}")

            if (it.name != "release") {
                it.versionNameSuffix = "-${it.name}"
                it.applicationIdSuffix = ".${it.name}"
                it.resValue("string", "app_name", "Oxygen Updater (${it.name})")
            } else {
                it.resValue("string", "app_name", "Oxygen Updater")
            }

            it.addManifestPlaceholders(
                mapOf(
                    "hostName" to "${if (it.name != "release") "test." else ""}oxygenupdater.com",
                    "advertisingAppId" to "ca-app-pub-1816831161514116~4275332954",
                    "shortcutXml" to "@xml/shortcuts_${it.name.lowercase()}",
                )
            )
        }
    }

    val javaVersion = JavaVersion.VERSION_17 // keep in sync with `jvmToolchain` below
    compileOptions {
        isCoreLibraryDesugaringEnabled = true
        sourceCompatibility = javaVersion
        targetCompatibility = javaVersion
    }

    kotlinOptions {
        jvmTarget = javaVersion.toString()
    }

    composeOptions {
        kotlinCompilerExtensionVersion = COMPOSE_COMPILER
    }

    buildFeatures {
        viewBinding = true
        compose = true
    }

    androidResources {
        // https://developer.android.com/guide/topics/resources/app-languages#auto-localeconfig
        @Suppress("UnstableApiUsage")
        generateLocaleConfig = true
    }

    testBuildType = "debug"
}

// Required to workaround https://issuetracker.google.com/issues/260059413
kotlin {
    jvmToolchain(17) // keep in sync with `javaVersion` above
    compilerOptions {
        // Disable the annoying "Parameter specified as non-null is null" exceptions
        freeCompilerArgs.add("-Xno-param-assertions")
        // https://github.com/androidx/androidx/blob/androidx-main/compose/compiler/design/compiler-metrics.md
        // Requires a fresh build to show all outputs
        val composeMetrics = project.layout.buildDirectory.dir("composeMetrics").get().asFile.path
        freeCompilerArgs.addAll(
            "-P", "plugin:androidx.compose.compiler.plugins.kotlin:metricsDestination=$composeMetrics",
            "-P", "plugin:androidx.compose.compiler.plugins.kotlin:reportsDestination=$composeMetrics",
        )
    }
}

ksp {
    // Add Room-specific arguments: https://developer.android.com/jetpack/androidx/releases/room#compiler-options
    arg("room.schemaLocation", "$projectDir/schemas")
    arg("room.incremental", "true")
}

dependencies {
    implementation(fileTree(mapOf("dir" to "libs", "include" to listOf("*.jar"))))

    // https://github.com/google/desugar_jdk_libs/blob/master/CHANGELOG.md
    coreLibraryDesugaring("com.android.tools:desugar_jdk_libs:2.0.3")

    // https://github.com/Kotlin/kotlinx.coroutines/releases
    val kotlinCoroutines = "1.7.3"
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinCoroutines")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlinCoroutines")

    // https://developer.android.com/jetpack/androidx/releases/annotation
    val annotation = "1.7.0"
    implementation("androidx.annotation:annotation:$annotation")

    // https://developer.android.com/jetpack/androidx/releases/browser
    implementation("androidx.browser:browser:1.6.0")

    // https://developer.android.com/jetpack/androidx/releases/core
    implementation("androidx.core:core-ktx:1.12.0")
    implementation("androidx.core:core-splashscreen:1.0.1")

    // https://developer.android.com/jetpack/androidx/releases/lifecycle
    val lifecycle = "2.6.2"
    implementation("androidx.lifecycle:lifecycle-common-java8:$lifecycle")
    implementation("androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle")
    implementation("androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle")
    implementation("androidx.lifecycle:lifecycle-runtime-compose:$lifecycle")

    // https://developer.android.com/jetpack/androidx/releases/room
    val room = "2.5.2"
    ksp("androidx.room:room-compiler:$room")
    implementation("androidx.room:room-ktx:$room")
    implementation("androidx.room:room-runtime:$room")

    // https://developer.android.com/jetpack/androidx/releases/preference
    implementation("androidx.preference:preference-ktx:1.2.1")

    // https://developer.android.com/jetpack/androidx/releases/work
    implementation("androidx.work:work-runtime:2.9.0-beta01")

    // https://developer.android.com/jetpack/androidx/releases/compose#versions
    val compose = "1.6.0-alpha05" // keep in sync with Kotlin & accompanist version
    val composeM3 = "1.2.0-alpha07"
    implementation("androidx.compose.animation:animation:$compose")
    implementation("androidx.compose.animation:animation-graphics:$compose")
    implementation("androidx.compose.foundation:foundation:$compose")
    implementation("androidx.compose.material3:material3:$composeM3")
    implementation("androidx.compose.material:material-icons-extended:$compose")
    implementation("androidx.compose.runtime:runtime-livedata:$compose")
    implementation("androidx.compose.ui:ui:$compose")
    implementation("androidx.compose.ui:ui-text-google-fonts:$compose")
    debugImplementation("androidx.compose.ui:ui-tooling:$compose")
    implementation("androidx.compose.ui:ui-tooling-preview:$compose")

    // https://developer.android.com/jetpack/androidx/releases/activity
    implementation("androidx.activity:activity-compose:1.8.0-beta01")

    // https://developer.android.com/jetpack/androidx/releases/navigation#versions
    implementation("androidx.navigation:navigation-compose:2.7.2")

    // https://github.com/google/accompanist#compose-versions
    // https://github.com/google/accompanist/releases
    val accompanist = "0.33.1-alpha" // keep in sync with Compose version
    implementation("com.google.accompanist:accompanist-systemuicontroller:$accompanist")
    implementation("com.google.accompanist:accompanist-permissions:$accompanist")
    implementation("com.google.accompanist:accompanist-placeholder-material3:$accompanist")
    implementation("com.google.accompanist:accompanist-webview:$accompanist")

    // https://firebase.google.com/support/release-notes/android
    implementation(platform("com.google.firebase:firebase-bom:32.2.3"))
    implementation("com.google.firebase:firebase-analytics-ktx")
    implementation("com.google.firebase:firebase-crashlytics-ktx")
    implementation("com.google.firebase:firebase-messaging-ktx")

    // https://developer.android.com/google/play/billing/release-notes
    val playBilling = "5.2.1"
    implementation("com.android.billingclient:billing:$playBilling")
    implementation("com.android.billingclient:billing-ktx:$playBilling")

    // https://developer.android.com/reference/com/google/android/play/core/release-notes-in_app_updates
    implementation("com.google.android.play:app-update:2.1.0")

    // https://developers.google.com/android/guides/releases
    // https://developers.google.com/android/guides/releases#:~:text=com.google.android.gms%3Aplay%2Dservices%2Dbase%3A
    implementation("com.google.android.gms:play-services-base:18.2.0")
    // https://developers.google.com/admob/android/rel-notes
    implementation("com.google.android.gms:play-services-ads:22.3.0")

    // https://mvnrepository.com/artifact/io.insert-koin/koin-android
    // https://github.com/InsertKoinIO/koin/tags
    // https://github.com/InsertKoinIO/koin/blob/master/CHANGELOG.md
    val koin = "3.4.3"
    implementation("io.insert-koin:koin-android:$koin")

    // https://mvnrepository.com/artifact/com.squareup.okhttp3/okhttp
    // https://github.com/square/okhttp/blob/master/CHANGELOG.md
    // https://square.github.io/okhttp/changelog/
    implementation("com.squareup.okhttp3:logging-interceptor:4.11.0")

    // https://github.com/square/retrofit/tags
    // https://github.com/square/retrofit/blob/master/CHANGELOG.md
    val retrofit = "2.9.0"
    implementation("com.squareup.retrofit2:retrofit:$retrofit")
    implementation("com.squareup.retrofit2:converter-jackson:$retrofit")

    // Note: Before updating version, make sure this library's kotlin-reflect dependency's version is the same as kotlin-stdlib's version above
    // Note: Stay on 2.13.x, as 2.14.x doesn't support Android 7.1/Nougat and below (API < 26)
    // Check https://mvnrepository.com/artifact/com.fasterxml.jackson.module/jackson-module-kotlin/<version>
    //noinspection GradleDependency
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:2.13.5")

    // https://github.com/coil-kt/coil/blob/main/CHANGELOG.md
    implementation("io.coil-kt:coil-compose:2.4.0")

    // https://github.com/topjohnwu/libsu/blob/master/CHANGELOG.md
    val libsu = "5.2.1"
    implementation("com.github.topjohnwu.libsu:core:$libsu")
    implementation("com.github.topjohnwu.libsu:nio:$libsu")
    implementation("com.github.topjohnwu.libsu:service:$libsu")

    // https://github.com/junit-team/junit4/releases
    testImplementation("junit:junit:4.13.2")
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit:$KOTLIN_VERSION")
    testImplementation("io.insert-koin:koin-test:$koin")
    testImplementation("androidx.annotation:annotation:$annotation")
}
